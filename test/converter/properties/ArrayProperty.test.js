import {test} from 'node:test';
import assert from 'node:assert/strict';

import SavReader from '../../../src/converter/sav-reader.js';
import ArrayProperty from '../../../src/converter/properties/ArrayProperty.js';

test('ArrayProperty - NameProperty', () => {
    const ArrayPropertyBytes = new Uint8Array([
        /* name length (20) */              0x14, 0x00, 0x00, 0x00,
        /* name ("CharacterPresetData") */  0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x00,

        /* type length (14) */              0x0E, 0x00, 0x00, 0x00,
        /* type ("ArrayProperty") */        0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,

        /* content length (221) */          0xDD, 0x00, 0x00, 0x00,

        /* padding */                       0x00, 0x00, 0x00, 0x00,

        /* subtype length (13) */           0x0D, 0x00, 0x00, 0x00,
        /* subtype ("NameProperty") */      0x4E, 0x61, 0x6D, 0x65, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,

        /* content start marker */          0x00,

        /* number of array elements (11) */ 0x0B, 0x00, 0x00, 0x00,

        0x14, 0x00, 0x00, 0x00,
        0x45, 0x79, 0x65, 0x62, 0x72, 0x6F, 0x77, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x31, 0x00,
        0x0F, 0x00, 0x00, 0x00,
        0x45, 0x79, 0x65, 0x62, 0x72, 0x6F, 0x77, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x35, 0x00,
        0x10, 0x00, 0x00, 0x00,
        0x45, 0x79, 0x65, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x37, 0x00,
        0x10, 0x00, 0x00, 0x00,
        0x4D, 0x61, 0x72, 0x6B, 0x69, 0x6E, 0x67, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x30, 0x67, 0x00,
        0x10, 0x00, 0x00, 0x00,
        0x4D, 0x61, 0x72, 0x6B, 0x69, 0x6E, 0x67, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x31, 0x62, 0x00,
        0x10, 0x00, 0x00, 0x00,
        0x4D, 0x61, 0x72, 0x6B, 0x69, 0x6E, 0x67, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x32, 0x63, 0x00,
        0x10, 0x00, 0x00, 0x00,
        0x4D, 0x61, 0x72, 0x6B, 0x69, 0x6E, 0x67, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x33, 0x61, 0x00,
        0x11, 0x00, 0x00, 0x00,
        0x48, 0x61, 0x69, 0x72, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x31, 0x00,
        0x0C, 0x00, 0x00, 0x00,
        0x48, 0x61, 0x69, 0x72, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x37, 0x00,
        0x0C, 0x00, 0x00, 0x00,
        0x46, 0x61, 0x63, 0x65, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x31, 0x33, 0x00,
        0x11, 0x00, 0x00, 0x00,
        0x53, 0x6B, 0x69, 0x6E, 0x43, 0x6F, 0x6C, 0x6F, 0x72, 0x4D, 0x61, 0x6C, 0x65, 0x30, 0x30, 0x38, 0x00
    ]);

    const someArrayProperty = new SavReader(ArrayPropertyBytes.buffer).readProperty();

    assert(someArrayProperty instanceof ArrayProperty, 'Expected instance of ArrayProperty');
    assert.strictEqual(someArrayProperty.name, 'CharacterPresetData');
    assert.strictEqual(someArrayProperty.subtype, 'NameProperty');
    assert.deepStrictEqual(someArrayProperty.value, [
        'EyebrowColorMale001',
        'EyebrowMale005',
        'EyeColorMale007',
        'MarkingMale000g',
        'MarkingMale001b',
        'MarkingMale002c',
        'MarkingMale003a',
        'HairColorMale001',
        'HairMale007',
        'FaceMale013',
        'SkinColorMale008'
    ]);
    assert.deepStrictEqual(someArrayProperty.toBytes(), ArrayPropertyBytes);
});
